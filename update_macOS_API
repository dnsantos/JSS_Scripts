username=""
password=""
url=""

#Variable declarations
bearerToken=""
tokenExpirationEpoch="0"

getBearerToken() {
	response=$(curl -s -u "$username":"$password" "$url"/api/v1/auth/token -X POST)
	bearerToken=$(echo "$response" | plutil -extract token raw -)
	tokenExpiration=$(echo "$response" | plutil -extract expires raw - | awk -F . '{print $1}')
	tokenExpirationEpoch=$(date -j -f "%Y-%m-%dT%T" "$tokenExpiration" +"%s")
}

checkTokenExpiration() {
    nowEpochUTC=$(date -j -f "%Y-%m-%dT%T" "$(date -u +"%Y-%m-%dT%T")" +"%s")
    if [[ tokenExpirationEpoch -gt nowEpochUTC ]]
    then
        echo "Token valid until the following epoch time: " "$tokenExpirationEpoch"
    else
        echo "No valid token available, getting new token"
        getBearerToken
    fi
}

invalidateToken() {
	responseCode=$(curl -w "%{http_code}" -H "Authorization: Bearer ${bearerToken}" $url/api/v1/auth/invalidate-token -X POST -s -o /dev/null)
	if [[ ${responseCode} == 204 ]]
	then
		echo "Token successfully invalidated"
		bearerToken=""
		tokenExpirationEpoch="0"
	elif [[ ${responseCode} == 401 ]]
	then
		echo "Token already invalid"
	else
		echo "An unknown error occurred invalidating the token"
	fi
}

checkTokenExpiration
curl -s -H "Authorization: Bearer ${bearerToken}" $url/api/v1/jamf-pro-version -X GET | grep "description" | awk '{print $NF}' | sed 's/"//g ; s/,//'

computer_ID=$(curl --request GET \
     --url https://grupopan.jamfcloud.com/JSSResource/computers/name/"$(/usr/local/bin/jamf getComputerName | sed 's/>/   /g ; s/</   /g' | awk '{print $2}')" \
     --header "Authorization: Bearer ${bearerToken}" \
     --header 'accept: application/xml')

echo $computer_ID >/private/tmp/computer_data.xml

curl --request POST \
     --url https://grupopan.jamfcloud.com/api/v1/managed-software-updates/plans \
     --header "accept: application/json" \
     --header "Authorization: Bearer ${bearerToken}" \
     --header "content-type: application/json" \
     --data '
{
  "devices": [
    {
      "objectType": "COMPUTER",
      "deviceId": '$(echo $(xmllint --xpath '//computer/general/id' /private/tmp/latest.xml /private/tmp/computer_data.xml | sed 's/>/   /g ; s/</   /g' | awk '{print $2}'))'
    }
  ],
  "config": {
    "updateAction": "DOWNLOAD_INSTALL",
    "versionType": "SPECIFIC_VERSION",
    "specificVersion": "13.6"
  }Ë‡
}
'

rm /private/tmp/computer_data.xml
checkTokenExpiration
invalidateToken
